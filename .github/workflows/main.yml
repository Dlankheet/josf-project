name: Deploy JOSF

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  JOSF_ZIP: "josf.zip"
  JOSF_DOWNLOAD_URL: "https://www.josf.nl/wp-content/releases/beta/JOSF-server-gitlab.zip"
  PLAYBOOK_NAME: "Testcase"
  GIT_USER_NAME: "GitHub DevOps agent"
  GIT_USER_EMAIL: "JOSF-github@valori.nl"
  GIT_BRANCH: "main"

jobs:
  deploy_josf:
    runs-on: ubuntu-latest
    timeout-minutes: 75

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Install necessary dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip

      # Set up Java and dependencies
      - name: Set up Java21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21
      
      # Set up Chrome and dependencies
      - name: Set up Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: 128
          install-chromedriver: true
          
      - name: Cache JOSF
        uses: actions/cache@v3
        with:
          path: JOSF # Cache the extracted JOSF directory
          key: ${{ runner.os }}-josf-${{ hashFiles('path-to-josf-version-file') }}
          restore-keys: |
            ${{ runner.os }}-josf-
    
        # Download and unzip JOSF if cache is not hit
      - name: Download and Unzip JOSF
        if: steps.cache.outputs.cache-hit != 'true' # Only download if cache is missed
        run: |
            wget -q -O "$JOSF_ZIP" "$JOSF_DOWNLOAD_URL"
            unzip -q "$JOSF_ZIP"

      # Start JOSF
      - name: Start JOSF
        run: |
          classes_dir="${GITHUB_WORKSPACE}/JOSF/action-packs"
          classpath="${GITHUB_WORKSPACE}/JOSF/api/josf-core.jar:$classes_dir/custom:$classes_dir/api:$classes_dir/selenese:$classes_dir/database"
          ls -R
          java -cp "$classpath" io.vertx.core.Launcher -conf {'http.port': 8090,'http.connection.timeout': 60000,'http.socket.timeout': 60000,'showObjectTimeout': 7,'pageLoadTimeout': 10,'setScriptTimeout': 15,'actionPackPath': '${GITHUB_WORKSPACE}/JOSF/action-packs','webappPath': '${GITHUB_WORKSPACE}/JOSF/josf-app'} &
          echo "Waiting for JOSF to be online..."
          for i in {1..120}; do
            if wget -q --spider http://localhost:8090/api/version; then
              echo "JOSF is online!"
              break
            fi
            echo -n "."
            sleep 1
          done

      - name: Execute playbook
        run: java -jar "${GITHUB_WORKSPACE}/JOSF/cli/josf-cli.jar" -r playbook "'$PLAYBOOK_NAME'" browser "'Headless Chrome'" retryCount "'0'" projectPath "'.'"

      # Commit playbook results
      - name: Commit Playbook Results
        run: |
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          git config user.name "$GIT_USER_NAME"
          git config user.email "$GIT_USER_EMAIL"
          git add "${GITHUB_WORKSPACE}/play-books/"* || true
          git commit -m "Commit pipeline playbook results [skip ci]" || echo "Nothing to commit"
          git pull origin ${{ env.GIT_BRANCH }} || true
          git push origin HEAD:${{ env.GIT_BRANCH }} || true

      # Search for generated JUnit file & Logfiles and push these as artifacts
      - name: Find and Move JUnit Report
        run: |
          JUNIT_FILE=$(find . -name "*junit-report.xml" -print -quit)
          if [[ -n "$JUNIT_FILE" ]]; then
            echo "Found JUnit report $JUNIT_FILE"
            mv "$JUNIT_FILE" "${GITHUB_WORKSPACE}/junit-report.xml"
          else
            echo "JUnit report not found!"
          fi

          if [[ -f "${GITHUB_WORKSPACE}/JOSF/api/logs/josf.log" ]]; then
            mv "${GITHUB_WORKSPACE}/JOSF/api/logs/josf.log" "${GITHUB_WORKSPACE}/josf.log"
          else
            echo "JOSF log not found!"
          fi

      # Upload artifacts
      - name: Upload JUnit Report
        uses: actions/upload-artifact@v3
        with:
          name: junit-report
          path: ${{ github.workspace }}/junit-report.xml
          if-no-files-found: ignore

      - name: Upload JOSF log
        uses: actions/upload-artifact@v3
        with:
          name: josf-log
          path: ${{ github.workspace }}/josf.log
          if-no-files-found: ignore
